============= ************* 18-12-2023 ******
git bash commands

1: 	git status

2: 	git init	(initialize git in a folder)

3:	git add --a 	/ git add . 	(all files)	/ git add index.html (only index.html)

4: 	git commit -m "message"		

5: 	git log 		(see all commits)


6: 	rm -rf .git 		(revoke / remove / delete git repo)


7: 	git clone <url of any repo>

8:	pwd 		(present working directory)

9: 	ls 		(list)


10:	touch index.html		(linux command to create file )


11:	touch .gitignore		(you can create a special file to ignore some files/folder to be tracked / added or anyother operations)

	wirte in .gitignore 		dir/		or use 		/dir/		

12: git diff 		(compare stagged area with working area [that has modifed after stagging])

13: git diff --staged					(compare previous commit with current stagging area)		


https://www.youtube.com/watch?v=87LrjX5xvFA&list=PLu0W_9lII9agwhy658ZPA0MTStKUJTWPi&index=8	

19-12-2023

14: 	git commit -a -m "Direct Commit"		(all tracked files are commited directly without stagging[note: untracked files will not go ])

15: 	git rm index.txt						(remove a file index.txt)

15: 	git mv index.txt index.html				(rename index.txt to index.html)

Note: Once a file is tracked , it will not be ignored by git, even if you put this file into .gitignore too.
to ignore it , you have to untract it first 

16: 	git rm --cached index.html 

20-12-2023	

https://www.youtube.com/watch?v=Hxn3OguEMd4&list=PLu0W_9lII9agwhy658ZPA0MTStKUJTWPi&index=11

17:		git log -p -3			(only three commits)

18: 	git log --stat			(a kind of summary of commits)

19: 	git log --prety=online / git log --prety=short / git log --prety=full	(single line summary)

20: 	git log --since=2.days git log --since=2.weeks / git log --since=2.months 	(last two days commits )

21: 	git restore --staged file-name		(unstage a file )

21: 	git checkout -- <file-name>			(if by mistake you modify a file and now you want to reset as it previous commit )

22: 	git checkout -f 					(reverse all changes , )

shift + Insert 			paste

working with remote 

23: 	Git remote 

create a repo on github / or any other git hosting site and add into your existing local repo in your computer 

24: 	git remote add origin git@github.com:mohsinakhtaralam/testing.git

after adding you can check remote by git remote ::::: 	Note: origin is the name of online repo , you can have any other but it is convention


23: 	Git remote -v

24:		git push -u origin master 



25: 	git config --global alias.st status					(give an alias to a long word / command to get shorter command)


26:		git restore text.html 			(discard chagnes done in text.html i.e. modified but not staged=>
										 it is like ctrl + Z , but remember dont this process dont have re-do :))

===================== 21-12-2023 =====================
https://www.youtube.com/watch?v=5e-DLY_spg0&list=PLu0W_9lII9agwhy658ZPA0MTStKUJTWPi&index=16






=============================================================
Untracked >>	Unmodified (but tracked)	>> 	

Modified 	>> 	(staged) 

File status Lifecycle		





=================================================
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFx0R8cqPf3EjSjleRpVcRnsN5Ftiltie0YKSjtrP7j9 mdxb.info@gmail.com


create folder and file on desktop and push to github online
-------------------------------------------------------

create repo on github first with the same name as on local
copy repo path and then push
git remote add origin git@github.com....path

check
git remote -v

then push
git push -u origin main

